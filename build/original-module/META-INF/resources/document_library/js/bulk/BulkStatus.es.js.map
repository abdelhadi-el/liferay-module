{"version":3,"sources":["../../../../../../../src/main/resources/META-INF/resources/document_library/js/bulk/BulkStatus.es.js"],"names":["BulkStatus","Component","Liferay","clearInterval","clearTimeout","response","error","message","openToastParams","setInterval","setTimeout","bulkInProgress","Config","bulkStatusUrl","intervalSpeed","pathModule","portletNamespace","waitingTime","Soy","templates"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2000-present Liferay, Inc. All rights reserved.\n *\n * This library is free software; you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation; either version 2.1 of the License, or (at your option)\n * any later version.\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n */\n\nimport {fetch, openToast} from 'frontend-js-web';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport templates from './BulkStatus.soy';\n\n/**\n * Shows the bulk actions status\n *\n * @abstract\n * @extends {Component}\n */\n\nclass BulkStatus extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tLiferay.component(this.portletNamespace + 'BulkStatus', this);\n\n\t\tif (this.bulkInProgress) {\n\t\t\tthis.startWatch();\n\t\t}\n\t}\n\n\t/**\n\t * Clears the interval to stop sending ajax requests.\n\t *\n\t * @protected\n\t */\n\t_clearInterval() {\n\t\tif (this.intervalId_) {\n\t\t\tclearInterval(this.intervalId_);\n\t\t}\n\t}\n\n\t/**\n\t * Clears the timeout that shows the component.\n\t *\n\t * @protected\n\t */\n\t_clearTimeout() {\n\t\tif (this.visibleTimeOut) {\n\t\t\tclearTimeout(this.visibleTimeOut);\n\t\t}\n\t}\n\n\t/**\n\t * Sends a request to get the status\n\t * of bulk actions.\n\t *\n\t * @protected\n\t */\n\t_getBulkStatus() {\n\t\tfetch(this.pathModule + this.bulkStatusUrl)\n\t\t\t.then(response => response.json())\n\t\t\t.then(response => {\n\t\t\t\tif (!response.actionInProgress) {\n\t\t\t\t\tthis._onBulkFinish(false);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tthis._onBulkFinish(true);\n\t\t\t});\n\t}\n\n\t/**\n\t * Stops sending ajax request and hides the component.\n\t *\n\t * @protected\n\t */\n\t_onBulkFinish(error) {\n\t\tthis._clearInterval();\n\t\tthis._clearTimeout();\n\t\tthis.bulkInProgress = false;\n\n\t\tthis._showNotification(error);\n\t}\n\n\t/**\n\t * Shows a toast notification.\n\t *\n\t * @param {boolean} error Flag indicating if is an error or not\n\t * @protected\n\t * @review\n\t */\n\t_showNotification(error) {\n\t\tlet message;\n\n\t\tif (error) {\n\t\t\tmessage = Liferay.Language.get('an-unexpected-error-occurred');\n\t\t}\n\t\telse {\n\t\t\tmessage = Liferay.Language.get('changes-saved');\n\t\t}\n\n\t\tconst openToastParams = {\n\t\t\tmessage\n\t\t};\n\n\t\tif (error) {\n\t\t\topenToastParams.title = Liferay.Language.get('error');\n\t\t\topenToastParams.type = 'danger';\n\t\t}\n\n\t\topenToast(openToastParams);\n\t}\n\n\t/**\n\t * Watch the status of bulk actions.\n\t * It shows the component if it takes\n\t * longer than 'waitingTime'.\n\t */\n\tstartWatch() {\n\t\tthis._clearInterval();\n\n\t\tthis._getBulkStatus();\n\n\t\tthis.intervalId_ = setInterval(\n\t\t\tthis._getBulkStatus.bind(this),\n\t\t\tthis.intervalSpeed\n\t\t);\n\n\t\tif (!this.bulkInProgress) {\n\t\t\tthis.visibleTimeOut = setTimeout(() => {\n\t\t\t\tthis.bulkInProgress = true;\n\t\t\t}, this.waitingTime);\n\t\t}\n\t}\n}\n\n/**\n * BulkStatus State definition.\n * @ignore\n * @static\n * @type {!Object}\n */\nBulkStatus.STATE = {\n\t/**\n\t * Wether to show the component or not\n\t * @type {Boolean}\n\t */\n\tbulkInProgress: Config.bool().value(false),\n\n\t/**\n\t * Uri to send the bulk status fetch request.\n\t * @instance\n\t * @memberof BulkStatus\n\t * @type {String}\n\t */\n\tbulkStatusUrl: Config.string().value('/bulk/v1.0/status'),\n\n\t/**\n\t * The interval (in milliseconds) on how often\n\t * we will check if there are bulk actions in progress.\n\t *\n\t * @instance\n\t * @memberof BulkStatus\n\t * @type {Number}\n\t */\n\tintervalSpeed: Config.number().value(1000),\n\n\t/**\n\t * PathModule\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {String}\n\t */\n\tpathModule: Config.string().required(),\n\n\t/**\n\t * Portlet's namespace\n\t *\n\t * @instance\n\t * @memberof BulkStatus\n\t * @review\n\t * @type {string}\n\t */\n\tportletNamespace: Config.string().required(),\n\n\t/**\n\t * The time (in milliseconds) we have to wait to\n\t * show the component.\n\t *\n\t * @instance\n\t * @memberof BulkStatus\n\t * @type {Number}\n\t */\n\twaitingTime: Config.number().value(1000)\n};\n\n// Register component\n\nSoy.register(BulkStatus, templates);\n\nexport default BulkStatus;\n"]}