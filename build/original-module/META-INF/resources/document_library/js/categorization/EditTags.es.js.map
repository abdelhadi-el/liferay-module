{"version":3,"sources":["../../../../../../../src/main/resources/META-INF/resources/document_library/js/categorization/EditTags.es.js"],"names":["EditTags","Component","Liferay","fileEntries","selectAll","folderId","url","method","bodyData","init","body","JSON","headers","response","size","event","selection","Promise","responseTags","responseSelection","item","dataProvider","modal","finalTags","tag","addedTags","removedTags","instance","documentBulkSelection","keywordsToAdd","keywordsToRemove","commonTags","commonTagsObjList","label","value","documentIds","selectionScope","repositoryId","_commonTags","Config","_loading","_showModal","description","groupIds","multiple","namespace","pathModule","spritemap","urlSelection","urlTags","urlUpdateTags","Soy","templates"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2000-present Liferay, Inc. All rights reserved.\n *\n * This library is free software; you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation; either version 2.1 of the License, or (at your option)\n * any later version.\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n */\n\nimport 'asset-taglib/asset_tags_selector/AssetTagsSelector.es';\n\nimport 'clay-multi-select';\n\nimport 'clay-radio';\n\nimport 'frontend-js-web/liferay/compat/modal/Modal.es';\nimport {fetch} from 'frontend-js-web';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport templates from './EditTags.soy';\n\n/**\n * Handles the tags of the selected\n * fileEntries inside a modal.\n */\nclass EditTags extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis._bulkStatusComponent = Liferay.component(\n\t\t\tthis.namespace + 'BulkStatus'\n\t\t);\n\t}\n\n\t/**\n\t * Close the modal.\n\t */\n\tclose() {\n\t\tthis._showModal = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\tthis.append = true;\n\t}\n\n\t/**\n\t * Open the modal and get the\n\t * commont tags.\n\t */\n\topen(fileEntries, selectAll, folderId) {\n\t\tthis.fileEntries = fileEntries;\n\t\tthis.selectAll = selectAll;\n\t\tthis.folderId = folderId;\n\t\tthis._showModal = true;\n\n\t\tthis._getCommonTags();\n\t}\n\n\t/**\n\t * Creates the ajax request.\n\t *\n\t * @param {String} url Url of the request\n\t * @param {Object} bodyData The body of the request\n\t * @param {Function} callback Callback function\n\t */\n\t_fetchTagsRequest(url, method, bodyData) {\n\t\tconst init = {\n\t\t\tbody: JSON.stringify(bodyData),\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t},\n\t\t\tmethod\n\t\t};\n\n\t\treturn fetch(this.pathModule + url, init)\n\t\t\t.then(response => response.json())\n\t\t\t.catch(() => {\n\t\t\t\tthis.close();\n\t\t\t});\n\t}\n\n\t_getDescription(size) {\n\t\tif (size === 1) {\n\t\t\treturn Liferay.Language.get(\n\t\t\t\t'you-are-editing-the-tags-for-the-selected-item'\n\t\t\t);\n\t\t}\n\n\t\treturn Liferay.Util.sub(\n\t\t\tLiferay.Language.get(\n\t\t\t\t'you-are-editing-the-common-tags-for-x-items.-select-edit-or-replace-current-tags'\n\t\t\t),\n\t\t\tsize\n\t\t);\n\t}\n\n\t_handleSelectedItemsChange(event) {\n\t\tthis._commonTags = event.selectedItems;\n\t}\n\n\t/**\n\t * Gets the common tags for the selected\n\t * file entries and updates the state.\n\t *\n\t * @private\n\t * @review\n\t */\n\t_getCommonTags() {\n\t\tthis._loading = true;\n\n\t\tconst selection = this._getSelection();\n\n\t\tPromise.all([\n\t\t\tthis._fetchTagsRequest(this.urlTags, 'POST', selection),\n\t\t\tthis._fetchTagsRequest(this.urlSelection, 'POST', selection)\n\t\t]).then(([responseTags, responseSelection]) => {\n\t\t\tif (responseTags && responseSelection) {\n\t\t\t\tthis._loading = false;\n\t\t\t\tthis._commonTags = this._setCommonTags(\n\t\t\t\t\t(responseTags.items || []).map(item => item.name)\n\t\t\t\t);\n\t\t\t\tthis.description = this._getDescription(responseSelection.size);\n\t\t\t\tthis.multiple = this.selectAll || this.fileEntries.length > 1;\n\t\t\t}\n\t\t});\n\t}\n\n\t_handleInputFocus(event) {\n\t\tconst dataProvider = event.target.refs.autocomplete.refs.dataProvider;\n\t\tconst modal = this.element.querySelector('.modal');\n\n\t\tif (modal && dataProvider && !modal.contains(dataProvider.element)) {\n\t\t\tmodal.appendChild(dataProvider.element);\n\t\t}\n\t}\n\n\t/**\n\t * Sync the input radio with the state\n\t * @param {!Event} event\n\t * @private\n\t * @review\n\t */\n\t_handleRadioChange(event) {\n\t\tthis.append = event.target.value === 'add';\n\t}\n\n\t/**\n\t * Sends request to backend services\n\t * to update the tags.\n\t * @param {!Event} event\n\t *\n\t * @private\n\t * @review\n\t */\n\t_handleFormSubmit(event) {\n\t\tevent.preventDefault();\n\n\t\tconst finalTags = this._commonTags.map(tag => tag.label);\n\n\t\tlet addedTags = [];\n\n\t\tif (!this.append) {\n\t\t\taddedTags = finalTags;\n\t\t}\n\t\telse {\n\t\t\taddedTags = finalTags.filter(\n\t\t\t\ttag => this._initialTags.indexOf(tag) == -1\n\t\t\t);\n\t\t}\n\n\t\tconst removedTags = this._initialTags.filter(\n\t\t\ttag => finalTags.indexOf(tag) == -1\n\t\t);\n\n\t\tconst instance = this;\n\n\t\tthis._fetchTagsRequest(\n\t\t\tthis.urlUpdateTags,\n\t\t\tthis.append ? 'PATCH' : 'PUT',\n\t\t\t{\n\t\t\t\tdocumentBulkSelection: this._getSelection(),\n\t\t\t\tkeywordsToAdd: addedTags,\n\t\t\t\tkeywordsToRemove: removedTags\n\t\t\t}\n\t\t).then(() => {\n\t\t\tinstance.close();\n\n\t\t\tif (instance._bulkStatusComponent) {\n\t\t\t\tinstance._bulkStatusComponent.startWatch();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Transforms the tags list in the object needed\n\t * for the ClayMultiSelect component.\n\t *\n\t * @param {List<String>} commonTags\n\t * @return {List<{label, value}>} new commonTags object list\n\t */\n\t_setCommonTags(commonTags) {\n\t\tthis._initialTags = commonTags;\n\n\t\tconst commonTagsObjList = [];\n\n\t\tif (commonTags.length > 0) {\n\t\t\tcommonTags.forEach(tag => {\n\t\t\t\tconst tagObj = {\n\t\t\t\t\tlabel: tag,\n\t\t\t\t\tvalue: tag\n\t\t\t\t};\n\n\t\t\t\tcommonTagsObjList.push(tagObj);\n\t\t\t});\n\t\t}\n\n\t\treturn commonTagsObjList;\n\t}\n\n\t_getSelection() {\n\t\treturn {\n\t\t\tdocumentIds: this.fileEntries,\n\t\t\tselectionScope: {\n\t\t\t\tfolderId: this.folderId,\n\t\t\t\trepositoryId: this.repositoryId,\n\t\t\t\tselectAll: this.selectAll\n\t\t\t}\n\t\t};\n\t}\n}\n\n/**\n * State definition.\n * @ignore\n * @static\n * @type {!Object}\n */\nEditTags.STATE = {\n\t/**\n\t * Tags that want to be edited.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {List<String>}\n\t */\n\t_commonTags: Config.array()\n\t\t.value([])\n\t\t.internal(),\n\n\t/**\n\t * Flag that indicate if loading icon must\n\t * be shown.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {Boolean}\n\t */\n\t_loading: Config.bool()\n\t\t.value(false)\n\t\t.internal(),\n\n\t/**\n\t * Flag that indicate if the modal must\n\t * be shown.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {Boolean}\n\t */\n\t_showModal: Config.bool()\n\t\t.value(false)\n\t\t.internal(),\n\n\t/**\n\t * Description\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {String}\n\t */\n\tdescription: Config.string(),\n\n\t/**\n\t * List of selected file entries.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {List<String>}\n\t */\n\tfileEntries: Config.array(),\n\n\t/**\n\t * Folder Id\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {String}\n\t */\n\tfolderId: Config.string(),\n\n\t/**\n\t * Group Ids.\n\t *\n\t * @type {List<String>}\n\t */\n\tgroupIds: Config.array().required(),\n\n\t/**\n\t * Flag that indicate if multiple\n\t * file entries has been selected.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {Boolean}\n\t */\n\tmultiple: Config.bool().value(false),\n\n\t/**\n\t * Portlet's namespace\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {string}\n\t */\n\tnamespace: Config.string().required(),\n\n\t/**\n\t * PathModule\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {String}\n\t */\n\tpathModule: Config.string().required(),\n\n\t/**\n\t * RepositoryId\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {String}\n\t */\n\trepositoryId: Config.string().required(),\n\n\t/**\n\t * Flag that indicate if \"select all\" checkbox\n\t * is checked.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {Boolean}\n\t */\n\tselectAll: Config.bool(),\n\n\t/**\n\t * Path to images.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {String}\n\t */\n\tspritemap: Config.string().required(),\n\n\t/**\n\t * Url to backend service that provides\n\t * the selection information.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {String}\n\t */\n\turlSelection: Config.string().value('/bulk/v1.0/bulk-selection'),\n\n\t/**\n\t * Url to backend service that provides\n\t * the common tags info.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {String}\n\t */\n\turlTags: Config.string().value('/bulk/v1.0/keywords/common'),\n\n\t/**\n\t * Url to backend service that updates\n\t * the tags.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {String}\n\t */\n\turlUpdateTags: Config.string().value('/bulk/v1.0/keywords/batch')\n};\n\n// Register component\n\nSoy.register(EditTags, templates);\n\nexport default EditTags;\n"]}