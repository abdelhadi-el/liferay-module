{"version":3,"sources":["../../../../../../../src/main/resources/META-INF/resources/document_library/js/categorization/EditCategories.es.js"],"names":["EditCategories","Component","Liferay","fileEntries","selectAll","folderId","vocabularyId","inputNode","valid","feedbackErrorNode","url","method","bodyData","init","body","JSON","headers","response","selection","Promise","responseCategories","responseSelection","size","finalCategories","categoryIds","item","documentIds","selectionScope","repositoryId","document","event","dataProvider","modal","parseInt","setTimeout","addedCategories","removedCategories","instance","documentBulkSelection","taxonomyCategoryIdsToAdd","taxonomyCategoryIdsToRemove","vocabularies","initialCategories","requiredVocabularies","vocabulariesList","categories","vocabulary","obj","id","required","selectedCategoryIds","selectedItems","singleSelect","title","name","categoriesObjList","itemObj","label","value","taxonomyCategoryId","description","Config","groupIds","hiddenInput","loading","multiple","namespace","pathModule","selectCategoriesUrl","showModal","spritemap","urlCategories","urlSelection","urlUpdateCategories","Soy","templates"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2000-present Liferay, Inc. All rights reserved.\n *\n * This library is free software; you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation; either version 2.1 of the License, or (at your option)\n * any later version.\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n */\n\nimport 'asset-taglib/asset_categories_selector/AssetCategoriesSelector.es';\n\nimport 'clay-multi-select';\n\nimport 'clay-radio';\n\nimport 'frontend-js-web/liferay/compat/modal/Modal.es';\nimport {fetch} from 'frontend-js-web';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport templates from './EditCategories.soy';\n\n/**\n * Handles the categories of the selected\n * fileEntries inside a modal.\n */\nclass EditCategories extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis._assetVocabularyCategories = new Map();\n\n\t\tthis._bulkStatusComponent = Liferay.component(\n\t\t\tthis.namespace + 'BulkStatus'\n\t\t);\n\t}\n\n\t/**\n\t * Close the modal.\n\t */\n\tclose() {\n\t\tthis.showModal = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\tthis.append = true;\n\t\tthis.dataSource = [];\n\t\tthis.urlCategories = `/bulk/v1.0/sites/${this.groupIds[0]}/taxonomy-vocabularies/common`;\n\n\t\tthis._feedbackErrorClass = 'form-feedback-item';\n\t\tthis._requiredVocabularyErrorMarkupText =\n\t\t\t'<div class=\"' +\n\t\t\tthis._feedbackErrorClass +\n\t\t\t'\">' +\n\t\t\tLiferay.Language.get('this-field-is-required') +\n\t\t\t'</div>';\n\t}\n\n\t/**\n\t * Open the modal and get the\n\t * commont categories.\n\t */\n\topen(fileEntries, selectAll, folderId) {\n\t\tthis.fileEntries = fileEntries;\n\t\tthis.selectAll = selectAll;\n\t\tthis.folderId = folderId;\n\t\tthis.showModal = true;\n\n\t\tthis._getCommonCategories();\n\t}\n\n\t/**\n\t * Checks if the vocabulary is empty or not.\n\t *\n\t * @param  {String} vocabularyId\n\t * @return {Boolean} true if it has a category, false if is empty.\n\t */\n\t_checkRequiredVocabulary(vocabularyId) {\n\t\tconst inputNode = this._getVocabularyInputNode(vocabularyId);\n\t\tlet valid = true;\n\n\t\tif (inputNode.value) {\n\t\t\tinputNode.parentElement.parentElement.classList.remove('has-error');\n\t\t}\n\t\telse {\n\t\t\tinputNode.parentElement.parentElement.classList.add('has-error');\n\n\t\t\tconst feedbackErrorNode = inputNode.parentElement.querySelector(\n\t\t\t\t'.' + this._feedbackErrorClass\n\t\t\t);\n\n\t\t\tif (!feedbackErrorNode) {\n\t\t\t\tinputNode.parentElement.insertAdjacentHTML(\n\t\t\t\t\t'beforeend',\n\t\t\t\t\tthis._requiredVocabularyErrorMarkupText\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tvalid = false;\n\t\t}\n\n\t\treturn valid;\n\t}\n\n\t/**\n\t * Checks if the vocabulary have errors\n\t *\n\t * @private\n\t * @review\n\t * @return {Boolean} true if it has a error, false if has not error.\n\t */\n\t_checkErrors() {\n\t\treturn !!this.element.querySelector('.has-error');\n\t}\n\n\t/**\n\t * Creates the ajax request.\n\t *\n\t * @param {String} url Url of the request\n\t * @param {Object} bodyData The body of the request\n\t * @param {Function} callback Callback function\n\t */\n\t_fetchCategoriesRequest(url, method, bodyData) {\n\t\tconst init = {\n\t\t\tbody: JSON.stringify(bodyData),\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t},\n\t\t\tmethod\n\t\t};\n\n\t\treturn fetch(this.pathModule + url, init)\n\t\t\t.then(response => response.json())\n\t\t\t.catch(() => {\n\t\t\t\tthis.close();\n\t\t\t});\n\t}\n\n\t/**\n\t * Gets the common categories for the selected\n\t * file entries and updates the state.\n\t *\n\t * @private\n\t * @review\n\t */\n\t_getCommonCategories() {\n\t\tthis.loading = true;\n\n\t\tconst selection = this._getSelection();\n\n\t\tPromise.all([\n\t\t\tthis._fetchCategoriesRequest(this.urlCategories, 'POST', selection),\n\t\t\tthis._fetchCategoriesRequest(this.urlSelection, 'POST', selection)\n\t\t]).then(([responseCategories, responseSelection]) => {\n\t\t\tif (responseCategories && responseSelection) {\n\t\t\t\tthis.loading = false;\n\t\t\t\tthis.description = this._getDescription(responseSelection.size);\n\t\t\t\tthis.multiple = this.selectAll || this.fileEntries.length > 1;\n\t\t\t\tthis.vocabularies = this._parseVocabularies(\n\t\t\t\t\tresponseCategories.items || []\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\t_getDescription(size) {\n\t\tif (size === 1) {\n\t\t\treturn Liferay.Language.get(\n\t\t\t\t'you-are-editing-the-categories-for-the-selected-item'\n\t\t\t);\n\t\t}\n\n\t\treturn Liferay.Util.sub(\n\t\t\tLiferay.Language.get(\n\t\t\t\t'you-are-editing-the-common-categories-for-x-items.-select-edit-or-replace-current-categories'\n\t\t\t),\n\t\t\tsize\n\t\t);\n\t}\n\n\t/**\n\t * Get all the categoryIds selected for all\n\t * the vocabularies.\n\t *\n\t * @return {List<Long>} List of categoryIds.\n\t */\n\t_getFinalCategories() {\n\t\tlet finalCategories = [];\n\n\t\tthis._assetVocabularyCategories.forEach(category => {\n\t\t\tconst categoryIds = category.map(item => item.value);\n\t\t\tfinalCategories = finalCategories.concat(categoryIds);\n\t\t});\n\n\t\treturn finalCategories;\n\t}\n\n\t_getSelection() {\n\t\treturn {\n\t\t\tdocumentIds: this.fileEntries,\n\t\t\tselectionScope: {\n\t\t\t\tfolderId: this.folderId,\n\t\t\t\trepositoryId: this.repositoryId,\n\t\t\t\tselectAll: this.selectAll\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Gets the input where categories are saved for a vocabulary.\n\t *\n\t * @param  {String} vocabularyId [description]\n\t * @return {DOMElement} input node.\n\t */\n\t_getVocabularyInputNode(vocabularyId) {\n\t\treturn document.getElementById(\n\t\t\tthis.namespace + this.hiddenInput + vocabularyId\n\t\t);\n\t}\n\n\t_handleInputFocus(event) {\n\t\tconst dataProvider = event.target.refs.autocomplete.refs.dataProvider;\n\t\tconst modal = this.element.querySelector('.modal');\n\n\t\tif (modal && dataProvider && !modal.contains(dataProvider.element)) {\n\t\t\tmodal.appendChild(dataProvider.element);\n\t\t}\n\t}\n\n\t/**\n\t * Sync the input radio with the state\n\t * @param {!Event} event\n\t * @private\n\t * @review\n\t */\n\t_handleRadioChange(event) {\n\t\tthis.append = event.target.value === 'add';\n\t}\n\n\t_handleSelectedItemsChange(event) {\n\t\tconst vocabularyId = event.vocabularyId;\n\n\t\tthis._assetVocabularyCategories.set(vocabularyId, event.selectedItems);\n\n\t\tif (this._requiredVocabularies.includes(parseInt(vocabularyId, 10))) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._checkRequiredVocabulary(vocabularyId);\n\t\t\t}, 0);\n\t\t}\n\t}\n\n\t/**\n\t * Sends request to backend services\n\t * to update the categories.\n\t * @param {!Event} event\n\t *\n\t * @private\n\t * @review\n\t */\n\t_handleFormSubmit(event) {\n\t\tevent.preventDefault();\n\n\t\tsetTimeout(() => {\n\t\t\tif (this._checkErrors()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst finalCategories = this._getFinalCategories();\n\n\t\t\tlet addedCategories = [];\n\n\t\t\tif (!this.append) {\n\t\t\t\taddedCategories = finalCategories;\n\t\t\t}\n\t\t\telse {\n\t\t\t\taddedCategories = finalCategories.filter(\n\t\t\t\t\tcategoryId =>\n\t\t\t\t\t\tthis.initialCategories.indexOf(categoryId) == -1\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst removedCategories = this.initialCategories.filter(\n\t\t\t\tcategory => finalCategories.indexOf(category) == -1\n\t\t\t);\n\n\t\t\tconst instance = this;\n\n\t\t\tthis._fetchCategoriesRequest(\n\t\t\t\tthis.urlUpdateCategories,\n\t\t\t\tthis.append ? 'PATCH' : 'PUT',\n\t\t\t\t{\n\t\t\t\t\tdocumentBulkSelection: this._getSelection(),\n\t\t\t\t\ttaxonomyCategoryIdsToAdd: addedCategories,\n\t\t\t\t\ttaxonomyCategoryIdsToRemove: removedCategories\n\t\t\t\t}\n\t\t\t).then(() => {\n\t\t\t\tinstance.close();\n\n\t\t\t\tif (instance._bulkStatusComponent) {\n\t\t\t\t\tinstance._bulkStatusComponent.startWatch();\n\t\t\t\t}\n\t\t\t});\n\t\t}, 250);\n\t}\n\n\t_parseVocabularies(vocabularies) {\n\t\tlet initialCategories = [];\n\t\tconst requiredVocabularies = [];\n\t\tconst vocabulariesList = [];\n\n\t\tvocabularies.forEach(vocabulary => {\n\t\t\tconst categories = this._parseCategories(\n\t\t\t\tvocabulary.taxonomyCategories || []\n\t\t\t);\n\n\t\t\tconst categoryIds = categories.map(item => item.value);\n\n\t\t\tconst obj = {\n\t\t\t\tid: vocabulary.taxonomyVocabularyId.toString(),\n\t\t\t\trequired: vocabulary.required,\n\t\t\t\tselectedCategoryIds: categoryIds.join(','),\n\t\t\t\tselectedItems: categories,\n\t\t\t\tsingleSelect: !vocabulary.multiValued,\n\t\t\t\ttitle: vocabulary.name\n\t\t\t};\n\n\t\t\tvocabulariesList.push(obj);\n\n\t\t\tif (vocabulary.required) {\n\t\t\t\trequiredVocabularies.push(vocabulary.taxonomyVocabularyId);\n\t\t\t}\n\n\t\t\tinitialCategories = initialCategories.concat(categoryIds);\n\t\t});\n\n\t\tthis.initialCategories = initialCategories;\n\t\tthis._requiredVocabularies = requiredVocabularies;\n\n\t\treturn vocabulariesList;\n\t}\n\n\t/**\n\t * Transforms the categories list in the object needed\n\t * for the ClayMultiSelect component.\n\t *\n\t * @param {List<Long, String>} categories\n\t * @return {List<{label, value}>} new commonItems object list\n\t */\n\t_parseCategories(categories) {\n\t\tconst categoriesObjList = [];\n\n\t\tif (categories.length > 0) {\n\t\t\tcategories.forEach(item => {\n\t\t\t\tconst itemObj = {\n\t\t\t\t\tlabel: item.taxonomyCategoryName,\n\t\t\t\t\tvalue: item.taxonomyCategoryId\n\t\t\t\t};\n\n\t\t\t\tcategoriesObjList.push(itemObj);\n\t\t\t});\n\t\t}\n\n\t\treturn categoriesObjList;\n\t}\n}\n\n/**\n * State definition.\n * @ignore\n * @static\n * @type {!Object}\n */\nEditCategories.STATE = {\n\t/**\n\t * Description\n\t *\n\t * @instance\n\t * @memberof EditCategories\n\t * @review\n\t * @type {String}\n\t */\n\tdescription: Config.string(),\n\n\t/**\n\t * List of selected file entries.\n\t *\n\t * @instance\n\t * @memberof EditCategories\n\t * @review\n\t * @type {List<String>}\n\t */\n\tfileEntries: Config.array(),\n\n\t/**\n\t * Folder Id\n\t *\n\t * @instance\n\t * @memberof EditCategories\n\t * @review\n\t * @type {String}\n\t */\n\tfolderId: Config.string(),\n\n\t/**\n\t * Group Ids.\n\t *\n\t * @type {List<String>}\n\t */\n\tgroupIds: Config.array().required(),\n\n\t/**\n\t * Hidden input name\n\t *\n\t * @type {String}\n\t */\n\thiddenInput: Config.string()\n\t\t.value('assetCategoryIds_')\n\t\t.internal(),\n\n\t/**\n\t * Original categoryIds\n\t *\n\t * @type {List<Long>}\n\t */\n\tinitialCategories: Config.array().internal(),\n\n\t/**\n\t * Flag that indicate if loading icon must\n\t * be shown.\n\t *\n\t * @instance\n\t * @memberof EditCategories\n\t * @review\n\t * @type {Boolean}\n\t */\n\tloading: Config.bool()\n\t\t.value(false)\n\t\t.internal(),\n\n\t/**\n\t * Flag that indicate if multiple\n\t * file entries has been selected.\n\t *\n\t * @instance\n\t * @memberof EditCategories\n\t * @review\n\t * @type {Boolean}\n\t */\n\tmultiple: Config.bool().value(false),\n\n\t/**\n\t * Portlet's namespace\n\t *\n\t * @instance\n\t * @memberof EditCategories\n\t * @review\n\t * @type {string}\n\t */\n\tnamespace: Config.string().required(),\n\n\t/**\n\t * PathModule\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {String}\n\t */\n\tpathModule: Config.string().required(),\n\n\t/**\n\t * RepositoryId\n\t *\n\t * @instance\n\t * @memberof EditCategories\n\t * @review\n\t * @type {String}\n\t */\n\trepositoryId: Config.string().required(),\n\n\t/**\n\t * Flag that indicate if \"select all\" checkbox\n\t * is checked.\n\t *\n\t * @instance\n\t * @memberof EditCategories\n\t * @review\n\t * @type {Boolean}\n\t */\n\tselectAll: Config.bool(),\n\n\t/**\n\t * Url to the categories selector page\n\t * @type {String}\n\t */\n\tselectCategoriesUrl: Config.string().required(),\n\n\t/**\n\t * Flag that indicate if the modal must\n\t * be shown.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {Boolean}\n\t */\n\tshowModal: Config.bool()\n\t\t.value(false)\n\t\t.internal(),\n\n\t/**\n\t * Path to images.\n\t *\n\t * @instance\n\t * @memberof EditCategories\n\t * @review\n\t * @type {String}\n\t */\n\tspritemap: Config.string().required(),\n\n\t/**\n\t * Url to backend service that provides\n\t * the common categories info.\n\t *\n\t * @instance\n\t * @memberof EditCategories\n\t * @review\n\t * @type {String}\n\t */\n\turlCategories: Config.string(),\n\n\t/**\n\t * Url to backend service that provides\n\t * the selection description.\n\t *\n\t * @instance\n\t * @memberof EditTags\n\t * @review\n\t * @type {String}\n\t */\n\turlSelection: Config.string().value('/bulk/v1.0/bulk-selection'),\n\n\t/**\n\t * Url to backend service that updates\n\t * the categories.\n\t *\n\t * @instance\n\t * @memberof EditCategories\n\t * @review\n\t * @type {String}\n\t */\n\turlUpdateCategories: Config.string().value(\n\t\t'/bulk/v1.0/taxonomy-categories/batch'\n\t),\n\n\t/**\n\t * List of vocabularies\n\t *\n\t * @type {Array}\n\t */\n\tvocabularies: Config.array().value([])\n};\n\n// Register component\n\nSoy.register(EditCategories, templates);\n\nexport default EditCategories;\n"]}