{"version":3,"sources":["clipboard.js"],"names":["ClipboardAction","Emitter","listen","Clipboard","constructor","trigger","options","resolveOptions","listenClick","action","defaultAction","target","defaultTarget","text","defaultText","container","document","body","listener","e","onClick","delegateTarget","currentTarget","clipboardAction","emitter","getAttributeValue","selector","querySelector","isSupported","actions","support","queryCommandSupported","forEach","destroy","suffix","element","attribute","hasAttribute","getAttribute","module","exports"],"mappings":"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","file":"clipboard.js","sourcesContent":["import ClipboardAction from './clipboard-action';\nimport Emitter from 'tiny-emitter';\nimport listen from 'good-listener';\n\n/**\n * Base class which takes one or more elements, adds event listeners to them,\n * and instantiates a new `ClipboardAction` on each click.\n */\nclass Clipboard extends Emitter {\n    /**\n     * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n     * @param {Object} options\n     */\n    constructor(trigger, options) {\n        super();\n\n        this.resolveOptions(options);\n        this.listenClick(trigger);\n    }\n\n    /**\n     * Defines if attributes would be resolved using internal setter functions\n     * or custom functions that were passed in the constructor.\n     * @param {Object} options\n     */\n    resolveOptions(options = {}) {\n        this.action    = (typeof options.action    === 'function') ? options.action    : this.defaultAction;\n        this.target    = (typeof options.target    === 'function') ? options.target    : this.defaultTarget;\n        this.text      = (typeof options.text      === 'function') ? options.text      : this.defaultText;\n        this.container = (typeof options.container === 'object')   ? options.container : document.body;\n    }\n\n    /**\n     * Adds a click event listener to the passed trigger.\n     * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n     */\n    listenClick(trigger) {\n        this.listener = listen(trigger, 'click', (e) => this.onClick(e));\n    }\n\n    /**\n     * Defines a new `ClipboardAction` on each click event.\n     * @param {Event} e\n     */\n    onClick(e) {\n        const trigger = e.delegateTarget || e.currentTarget;\n\n        if (this.clipboardAction) {\n            this.clipboardAction = null;\n        }\n\n        this.clipboardAction = new ClipboardAction({\n            action    : this.action(trigger),\n            target    : this.target(trigger),\n            text      : this.text(trigger),\n            container : this.container,\n            trigger   : trigger,\n            emitter   : this\n        });\n    }\n\n    /**\n     * Default `action` lookup function.\n     * @param {Element} trigger\n     */\n    defaultAction(trigger) {\n        return getAttributeValue('action', trigger);\n    }\n\n    /**\n     * Default `target` lookup function.\n     * @param {Element} trigger\n     */\n    defaultTarget(trigger) {\n        const selector = getAttributeValue('target', trigger);\n\n        if (selector) {\n            return document.querySelector(selector);\n        }\n    }\n\n    /**\n     * Returns the support of the given action, or all actions if no action is\n     * given.\n     * @param {String} [action]\n     */\n    static isSupported(action = ['copy', 'cut']) {\n        const actions = (typeof action === 'string') ? [action] : action;\n        let support = !!document.queryCommandSupported;\n\n        actions.forEach((action) => {\n            support = support && !!document.queryCommandSupported(action);\n        });\n\n        return support;\n    }\n\n    /**\n     * Default `text` lookup function.\n     * @param {Element} trigger\n     */\n    defaultText(trigger) {\n        return getAttributeValue('text', trigger);\n    }\n\n    /**\n     * Destroy lifecycle.\n     */\n    destroy() {\n        this.listener.destroy();\n\n        if (this.clipboardAction) {\n            this.clipboardAction.destroy();\n            this.clipboardAction = null;\n        }\n    }\n}\n\n\n/**\n * Helper function to retrieve attribute value.\n * @param {String} suffix\n * @param {Element} element\n */\nfunction getAttributeValue(suffix, element) {\n    const attribute = `data-clipboard-${suffix}`;\n\n    if (!element.hasAttribute(attribute)) {\n        return;\n    }\n\n    return element.getAttribute(attribute);\n}\n\nmodule.exports = Clipboard;\n"]}